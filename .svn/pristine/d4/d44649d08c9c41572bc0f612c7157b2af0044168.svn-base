package view;

import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.SortedMap;
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.TreeSet;

import models.Habitant;
import models.PoliticalParty;
import models.Province;

import repository.Repository;

public class ResultElectionUC {

	Repository repository;
	List<Province> provinces;
	
	public ResultElectionUC(Repository repository) {
		this.repository = repository;
		this.provinces = repository.provinceRepository.getAllProvinces();
		makeUserCase();
	}

	private void makeUserCase() {
		for (Province province : this.provinces) {
			List<Habitant> habitants = this.getAllHabitantsByProvince(province.getCode());
			List<Habitant> filterHabitants = this.CanVoteFilter(habitants); 
			//Se filtran para eliminar lo que no pueden votar
			//Ya tenemos todos los votantes de esa provincia
			Integer numTotalVoters = filterHabitants.size();
			Integer validVotes = this.getValidVotes(filterHabitants);
			Set<PoliticalParty> politicalPartiesProvince = this.repository.electionRepository.getAllPoliticalPartyByProvince(province.getCode());
			//Ahora hay que traerse los votos por partidos en dicha provincia y ordenarlos por votos
			SortedMap<PoliticalParty, Integer> politicalPartiesNumVotes = this.getVotesForPoliticalParty(filterHabitants, politicalPartiesProvince);
			//Ahora llamar a MethodHont
			//devolver el resultado
			SortedMap<PoliticalParty, Integer> politicalPartiesResults; //Llamar al metodo que necesitemos
		}
	}

	private SortedMap<PoliticalParty, Integer> getVotesForPoliticalParty(
			List<Habitant> filterHabitants, Set<PoliticalParty> politicalPartiesProvince) {
		SortedMap<PoliticalParty, Integer> politicalPartiesNumVotes = new TreeMap<PoliticalParty, Integer>();
		for (PoliticalParty politicalParty : politicalPartiesProvince) {
			Integer cont = Integer.valueOf(0);
			for (Habitant habitant : filterHabitants){
				if (habitant.getNamePoliticalParty().equals(politicalParty.getName())) {
					cont ++;
				}
			}
			politicalPartiesNumVotes.put(politicalParty, cont);
		}
		return politicalPartiesNumVotes;
	}

	private Integer getValidVotes(List<Habitant> filterHabitants) {
		Integer res = Integer.valueOf(0);
		for(Habitant habitant : filterHabitants){
			if(habitant.isValidVotes()){
				res ++;
			}
		}
		return res;
	}

	private List<Habitant> CanVoteFilter(List<Habitant> habitants) {
		List<Habitant> filter = new LinkedList<Habitant>();
		for (Habitant habitant : habitants){
			if (habitant.isAdult()) {
				filter.add(habitant);
			}
		}
		return filter;
	}

	private List<Habitant> getAllHabitantsByProvince(Integer code) {
		return this.repository.habitantRepository.getAllHabitantsByProvince(code);
	}
	
}
