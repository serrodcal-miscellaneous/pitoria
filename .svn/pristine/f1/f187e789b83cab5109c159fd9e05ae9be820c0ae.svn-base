package view;

import java.util.List;
import java.util.Random;
import java.util.Set;

import repository.Repository;

import models.Habitant;
import models.PoliticalParty;
import models.Province;

public class VoteUC {

	private Repository repository;
	private List<Habitant> habitants;
	
	public VoteUC(Repository _repository){
		this.repository = _repository;
		//Aqui cargar los datos del repositorio que sean necesarios inicialmente.
		this.habitants = repository.habitantRepository.getAllHabitants();
		//Una vez hecho llamar al metodo makeUserCase() que ejecuta el caso de uso
		makeUserCase();
	}
	
	public Repository endUserCase(){
		//devolvemos el repositorio modificado para usarlo en el otro caso de uso
		return this.repository;
	}
	
	private void makeUserCase(){
		//Este metodo es la que va a realizar paso por paso el caso de uso, llamando
		//a metodos de esta misma clase.
		
		for(Habitant habitant:this.habitants){
			StringBuffer mensaje = new StringBuffer();mensaje.append("El votante ");mensaje.append(habitant.getName());mensaje.append(" ");mensaje.append(habitant.getSurname());mensaje.append(" va a votar.");
			System.out.println(mensaje);
			mensaje = new StringBuffer("El votante introduce su numero de identificacion.");
			System.out.println(mensaje);
			if(this.existsHabitantById(habitant.getid()) && this.habitantCanVote(habitant)){
				mensaje = new StringBuffer("Votante identificado, id: ");mensaje.append(habitant.getid());
				System.out.println(mensaje);
				Set<PoliticalParty> politicalParties = this.getAllPoliticalPartyByProvince(habitant.getCodeProvince());
				//Votar: elegir un partido
				//Almacenar el voto. Modificar el repositorio para que cambie el atributo partidoPolitoco de ese habitante
			}
		}
	}
	
	private Boolean existsHabitantById(String _id){
		Boolean res = false;
		//Aqui comprobar que ese id existe en el repositorio
		return res;
	}
	
	private Boolean habitantCanVote(Habitant _habitant){
		Boolean res = _habitant.isAdult() && !this.hasAlreadyVotedHabitant(_habitant.getid());
		return res;
	}
	
	private Set<PoliticalParty> getAllPoliticalPartyByProvince(Integer _codeProvince){
		return this.repository.electionRepository.getAllPoliticalPartyByProvince(_codeProvince);
	}
	
	private void habitantVotePoliticalParty(PoliticalParty _vote, Habitant _habitant){
		//Tener en cuenta Null = no ha votado; PartidoPolitico vacio = voto en blanco.
		//Comprobar que no ha votado previamente, mirando en el repositorio.
		//Registrarle a ese habitante su voto y meterlo en el repositorio.
	}
	
	private Boolean hasAlreadyVotedHabitant(String _id){
		Boolean res = this.repository.habitantRepository.habitantHasVoted(_id); //false es que no ha votado
		return res;
	}
	
}
